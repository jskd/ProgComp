#+STARTUP: hidestars
#+TODO: TODO(t!) FOCUSED (f@/!) STARTED(s@/!) WAITING(w@/!) SOMEDAY(S@/!) URGENT (u!) | DONE(d!) CANCELLED(c@!)

*Programmation comparée 2018*

Sous Emacs, utiliser [TAB] pour ouvrir ou fermer les différentes sections.

* Comment lire ce qui suit?
  À chaque séance, vous *devez* effectuer la liste des tâches.
  Les tâches préfixées par "Discussion" ou "Cours" sont faites en groupe-classe.
  Les autres tâches sont faites en petits groupes ou individuellement.

* Séances
** Séance 1
*** DONE Cours: Séance 1 "Les paradigmes de programmation"
    - State "DONE"       from "TODO"       [2018-01-08 Mon 12:54]
*** DONE S'inscrire sur le git moule
    - State "DONE"       from "TODO"       [2018-01-08 Mon 12:54]
*** TODO Former les groupes de projet
*** TODO Faire son choix de contraintes
*** TODO Discussion: Défi 0
*** TODO Discussion: Défi 1
*** TODO Définir un "coding style" pour chaque groupe
*** TODO Se documenter sur 'Docker'
*** TODO Se documenter sur 'git' (comment faire une branche, une pull-request, etc)
*** TODO Lire http://sijinjoseph.com/programmer-competency-matrix/
*** TODO Lire http://cs.lmu.edu/~ray/notes/pltypes/
*** TODO Lire https://en.wikipedia.org/wiki/Programming_paradigm
*** TODO Lire https://en.wikipedia.org/wiki/Comparison_of_programming_languages
*** TODO Lire doc/little-guide-software-engineering.pdf

** Séance 2
*** DONE Nouvelle présentation du défi 0.
    - State "DONE"       from "TODO"       [2018-01-15 Mon 11:42]
*** DONE Relire doc/little-guide-software-engineering.pdf
    - State "DONE"       from "TODO"       [2018-01-15 Mon 11:42]
*** DONE Affectation des contraintes technologiques
    - State "DONE"       from "TODO"       [2018-01-15 Mon 12:36]
*** DONE Présentations d'analyse du problème du défi 1.
    - State "DONE"       from "TODO"       [2018-01-22 Mon 10:04]
*** TODO Réalisation du défi 1
*** TODO Présentation du défi 2
*** TODO Lire https://cr.yp.to/qmail/qmailsec-20071101.pdf
** Séance 3
*** DONE Point sur le défi 1
    - State "DONE"       from "TODO"       [2018-01-22 Mon 11:45]
*** DONE Expérience : Présentation de la réalisation du défi 1 par une autre équipe
    - State "DONE"       from "TODO"       [2018-01-29 Mon 08:53]
*** DONE Présentation du défi 2
    - State "DONE"       from "TODO"       [2018-01-29 Mon 08:53]
** Séance 4
*** TODO Point sur le défi 1 et le défi 2
*** TODO L'équipe de tests fait son rapport!
*** TODO Expérience : Corriger un bug dans un code écrit par quelqu'un d'autre, avec son aide.
*** TODO Défi 2, brainstorming
*** TODO Les paradigmes de programmation
*** TODO La programmation structurée
*** TODO Présentation du défi 3
*** TODO Calendrier des exposés techniques
*** TODO Lire https://dl.acm.org/citation.cfm?id=359140 (le PDF, bien sûr)
** Séance 5
*** DONE Séance brainstorming sur le défi 2
    - State "DONE"       from "TODO"       [2018-02-05 Mon 12:26]
**** Les questions
     - Comment accéder aux données sans les charger entièrement en
       mémoire vive?
     - Comment créer le fichier view0.csv (qui est un gros fichier)?
     - Comment mettre à jour incrémentalement le calcul en fonction
       des changements de user.txt?
**** Les solutions
     - babar: Ne charger que les formules en mémoire et faire des
       accès direct aux données dans le fichier data.
     - scableur: Utiliser HDFS pour stocker les données et le
       design-pattern proxy pour y accéder comme ci elles étaient
       chargées en mémoire.
     - carmack: Construire une structure de données qui (i) permet
       d'ordonnancer les calculs sous la forme d'une séquence de
       calculs travaillant sur des flots de données faciles à
       transmettre au GPU ; (ii) de mettre à jour incrémentalement
       les calculs en fournissant les formules impactés par un
       changement à une coordonnée donnée.
     - nw-group: Voir une table comme une fonction des valeurs vers
       les ensembles de points qui ont cette valeur. 
*** DONE Présentation du défi 3
    - State "DONE"       from "TODO"       [2018-02-05 Mon 12:28]
    - Voir https://blacs.github.io/API/index.html
*** TODO Calendrier des exposés techniques
    - <2018-02-12> "Test driven development" par les charlatans
    - <2018-02-19> "Spark" par Scableur
    - <2018-02-26> "Programmation SIMD sur GPU" par Carmack
    - <2018-03-05> "Go" par nw-group
    - <2018-03-12> "Rust" par Babar
*** DONE Les paradigmes de programmation
    - State "DONE"       from "TODO"       [2018-02-12 Mon 10:09]
    - POO : Interaction entre entité autonome qui collabore pour
      résoudre un problème.
    - Impérative : Résoudre un problème en modifiant le monde par une séquence
      d'actions bien déterminé.
    - Logique : Modéliser le monde  comme un ensemble de règles et un problème
      est une requête de satisfiabilité dans vis-à-vis de ces règles.
    - Fonctionnelle : Le monde est composée de valeurs (mathématiques) et
      la résolution d'un problème c'est écrire une fonction qui produit
      les valeurs recherchées à partir des valeurs que l'on donne.
** Séance 6
*** TODO La programmation structurée
*** TODO Lire https://dl.acm.org/citation.cfm?id=359140 (le PDF, bien sûr)

*** TODO Défi 2: Etat des lieux
*** TODO Défi 3: Brainstorming et plan
* Notes de cours

Ces notes sont à compléter avec vos propres remarques personnelles et
les lectures conseillées dans la section précédente.

** Introduction
*** Quel est le sujet de ce cours?
    Ce cours porte sur la *communication à travers le code
    source*. Les questions abordées sont les suivantes:

    - Quels sont les critères d'évaluation d'un bon code source?
    - Quelle influence ont les paradigmes de programmation sur la
      conception et l'implémentation des systèmes informatiques?
    - Comment analyser du code?
    - Comment expliquer du code?
    - Comment collaborer autour du code?

    Pour répondre à ces questions, nous allons suivre deux grandes méthodes:

    - L'étude comparative des différents paradigmes de programmation
      et de l'Histoire de la programmation.

    - L'expérimentation de situations de communication autour du code:
      - Expliquer son code.
      - Expliquer, modifier, évaluer le code d'un tiers.
      - Comparer des solutions techniques pour la résolution d'un problème donné.
      - Exposer une solution technique.
      - Intégrer un projet logiciel existant.

*** Qu'est-ce que j'attends de vous?

    - Avant tout, de l'ouverture d'esprit, de la curiosité et un
      comportement actif en cours!

    - Plus "scolairement" : vous serez évalués de façon continue lors
      des diverses expériences et l'examen final portera sur une
      analyse du travail de l'ensemble des groupes.

    - Les items marqués TODO dans la section précédente *doivent* être
      pris au sérieux et effectués conscieusement.
* Fiches méthodologiques
** Comment évaluer du code?
*** Correction
*** Efficacité
*** Lisilibité
*** Extensibilité
*** Robustesse
** Comment présenter du code?
** Comment évaluer efficacement le travail d'un collègue?
