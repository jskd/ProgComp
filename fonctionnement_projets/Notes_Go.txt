============================
Preprocessing du fichier CSV
============================

Ce preprocessing consiste à inverser l'indexation de la feuille de
calcul.  Plus précisément, la feuille de calcul initiale peut-être vue
comme une sorte de matrice ; on a donc une indexation des positions
(ligne, colonne) vers des valeurs.  Notre idée est d'inverser cette
indexation afin de faciliter le calcul des formules par la suite.  Pour
cela, on parcourt donc tout le fichier CSV d'entrée. Après cette
transformation, la fichier CSV d'entrée sera manipulé sur disque via une
arborescence de fichiers contenant des positions.  On aura un fichier
par valeur et un fichier par formule.

Exemple
=======

Prenons par exemple le fichier CSV d'entrée suivant :

    1; 2; 3; =#(0, 0, 1, 1, 2)
    3; 2; 1; =#(0, 0, 1, 2, 3)

Après preprocessing, ce fichier sera représenté sur disque par
l'arborescence de fichiers suivante :

    1 # fichier contenant les positions (0, 0) et (1, 2)
    2 # fichier contenant les positions (0, 1) et (1, 1)
    3 # fichier contenant les positions (0, 2) et (1, 0)
    FORMULAS/
        2/
            0_0_1_1_2 # fichier contenant la position (0, 3)
        3/
            0_0_1_2_3 # fichier contenant la position (1, 3)

On représente les positions en binaire dans les fichiers pour avoir une
représentation la plus compacte possible.

Pourquoi ce changement de représentation ?
==========================================

Comme évoqué précédemment, c'est pour faciliter l'évaluation des
formules.  Pour évaluer une formule "count" sur la valeur x, on a juste
à compter le nombre de positions dans le fichier x qui sont dans la
région sur laquelle porte la formule.

Un autre avantage de cette représentation est que si une même formule
apparaît plusieurs fois dans la feuille de calcul, alors elle ne sera
calculée qu'une seule fois

==================================================
Construction du graphe de dépendances des formules
==================================================

Après le preprocessing, on a donc la liste de toutes les formules sous
la main.  À partir de cette liste, on construit un graphe de dépendances
des formules.  On fait un parcours de ce graphe afin d'éliminer les
cycles (plus précisément, on élimine les nœuds (formules) qui sont dans
un cycle ou ont un chemin vers un cycle).  On récupère ainsi deux listes
de formules, celles qui sont invalides (éliminées par la détection de
cycle) et les autres (celles qui sont valides).  On peut maintenant
passer à l'évaluation des formules valides.

=======================
Évaluation des formules
=======================

On évalue les formules en parallèle (dans une goroutine).

Quid des dépendances ?
======================

L'idée, c'est qu'au début, chaque formule devant compter le nombre de
x dans une région r va compter dans le fichier x le nombre de positions
qui sont dans r.  Elle fait cela de son côté, sans se soucier du
résultat des autres formules.  On obtient ainsi une évaluation partielle
de la formule.  Ensuite, cette formule va attendre de recevoir un
message (le résultat) de chacune de ses dépendances et modifier en
conséquence son résultat partiel afin d'obtenir son résultat final.
Finalement, cette formule va envoyer son résultat à toutes les formules
qui dépendent d'elle.

====================
Organisation du code
====================

Chaque sous-répertoire du répertoire defis/2/nw-group/Go/src correspond
à un package.

Package parse
=============

Ce package contient le code qui sert à construire et manipuler
l'arborescence de fichiers binaires (parsing du CSV, lecture/écriture
dans un fichier binaire).

Package spreadsheet
===================

Ce package contient tout ce qui concerne le "moteur" du tableur
(représentation des formules, évaluation des formules entre autres).

Package digraph
===============

Ce package implémente une mini-bibliothèque de manipulation de graphes
orientés pour les besoins du projet (construction de graphe, détection
de cycle).

Package share
=============

Ce package regroupe juste quelques petites fonctions utilitaires.
